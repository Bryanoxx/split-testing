var SplitTesting=(()=>{var g=Object.defineProperty;var c=Object.getOwnPropertySymbols;var V=Object.prototype.hasOwnProperty,W=Object.prototype.propertyIsEnumerable;var f=(t,e,n)=>e in t?g(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,h=(t,e)=>{for(var n in e||(e={}))V.call(e,n)&&f(t,n,e[n]);if(c)for(var n of c(e))W.call(e,n)&&f(t,n,e[n]);return t};var x=t=>g(t,"__esModule",{value:!0});var k=(t,e)=>{x(t);for(var n in e)g(t,n,{get:e[n],enumerable:!0})};var R={};k(R,{setExperiment:()=>I});function b(t,e){e&&console.log("SplitTesting.js -",t)}function p(t){return e=>{b(e,t)}}function l(t){console.warn("SplitTesting.js -",t)}function d(t){return new Error(`SplitTesting.js - ${t}`)}function u(t){if(typeof t=="function")return t;let e=Array.isArray(t)?[]:{};for(var n in t){let r=t[n],i={}.toString.call(r).slice(8,-1);i==="Array"||i==="Object"?e[n]=u(r):i==="Date"?e[n]=new Date(r.getTime()):e[n]=r}return e}function w(t){let e=t.some(i=>i.weight!==void 0),n=t.every(i=>i.weight!==void 0),r=t.reduce((i,a)=>{var o;return i+((o=a.weight)!=null?o:0)},0);return e&&!n?(l("Some items have a weight but not all of them, reset of all weight"),!1):n&&r!==1?(l("The total of all weight is not equal to 1, reset of all weight"),!1):!!e}function v(t){let e=1/t.length;return t.map(r=>(r.weight=e,r))}function y(t,e){let n=e!==void 0?E(e):Math.random();return t.find(i=>{if(n<i.weight)return i;n-=i.weight})}function E(t){return(t.split("").map(i=>i.charCodeAt(0)).reduce((i,a)=>i+a,0)*9301+49297)%233280/233280}function I(t){var a,o,m;let e=h({},t);if(e.variants=u(t.variants),e.isDebugMode=(a=t.isDebugMode)!=null?a:!1,e.isResolvingSeedConflictAllowed=(o=t.isResolvingSeedConflictAllowed)!=null?o:!1,(window==null?void 0:window.localStorage)!==void 0&&(e.storage=(m=e.storage)!=null?m:window.localStorage),typeof e.name!="string"||e.name.length===0)throw d("The experiment name must be a non-empty string");if(!Array.isArray(e.variants)||e.variants.length===0)throw d("The variants must be an array of at least one element");if(!e.variants.every(s=>s.name!==void 0&&s.name.length>0))throw d("The variants must have a name");let r=p(e.isDebugMode);r("Running split testing with these options :"),r(e);let i=T(e);if(i===null){r("No variant picked in storage, picking it now");let s=S(e,r);return e.onFirstPicking!==void 0&&e.onFirstPicking(s),s}else{if(r(`Variant already picked, named ${i.name}`),T(e)===void 0)throw d(`The variant named ${i.name} is not valid (not found in the variants)`);return e.isResolvingSeedConflictAllowed&&e.seed!==void 0&&!P(e)?(l("Conflict between the old seed and the current seed, updating the variant for the current seed"),S(e,r)):i}}function T(t){let e=t.storage.getItem(`ST-${t.name}-variant-name`);if(e===null)return null;let n=t.variants.find(r=>r.name===e);return n!=null?n:null}function A({name:t,storage:e,seed:n},r,i){e.setItem(`ST-${t}-variant-name`,r.name),i(`New picked variant: ${r.name} ${n!==void 0?"(with seed)":""}`),n!==void 0?e.setItem(`ST-${t}-seed`,n):e.removeItem(`ST-${t}-seed`)}function S(t,e){let n=t.variants,r=t.seed,i=w(n),a=i?n:v(n);i||e("Making all weight equal so the variants have the same probability of being picked");let o=y(a,r);return A(t,o,e),o}function P({name:t,seed:e,storage:n}){return n.getItem(`ST-${t}-seed`)===e}return R;})();
//# sourceMappingURL=bundle.js.map
