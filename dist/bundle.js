var SplitTesting=(()=>{var w=Object.defineProperty;var b=e=>w(e,"__esModule",{value:!0});var N=(e,t)=>{b(e);for(var n in t)w(e,n,{get:t[n],enumerable:!0})};var A={};N(A,{getPickedVariant:()=>S,getPickedVariantName:()=>p,makeVariantsWithEqualWeights:()=>g,pickVariant:()=>h,sameLocalAndGivenSeed:()=>k,setExperiment:()=>T});var v=!1;function x(e){v=e}function s(...e){v&&console.log("SplitTesting.js -",...e)}function f(...e){console.warn("SplitTesting.js -",...e)}function d(...e){console.error("SplitTesting.js -",...e)}function y(e,t){let n=t!==void 0?I(t):Math.random();return e.find(i=>{if(n<i.weight)return i;n-=i.weight})}function I(e){return(e.split("").map(i=>i.charCodeAt(0)).reduce((i,l)=>i+l,0)*9301+49297)%233280/233280}function m(e){if(typeof e=="function")return e;let t=Array.isArray(e)?[]:{};for(var n in e){let a=e[n],i={}.toString.call(a).slice(8,-1);i==="Array"||i==="Object"?t[n]=m(a):i==="Date"?t[n]=new Date(a.getTime()):t[n]=a}return t}function T(e){let{name:t,seed:n,debug:a,onVariantPicked:i,resolveSeedConflict:l}=e,r=m(e.variants);if(typeof t!="string"||t.length===0)return d("Experiment name is required"),!1;if(!Array.isArray(r)||r.length===0)return d("Variants are required"),!1;if(!r.every(u=>u.name!==void 0&&u.name.length>0))return d("All variants must have a name"),!1;a===!0&&(x(!0),s("Running split testing with these options :"),s({experimentName:t,variants:e.variants,seed:n,debug:a}));let o=p(t);if(o===null)s("No variant picked in localStorage, picking it now"),h({experimentName:t,variants:r,seed:n,callback:i});else{if(s(`Variant already picked, named ${o}`),S({experimentName:t,variants:r})===void 0)return d("Variant name in localStorage don't exist in the variants given in options"),!1;l!==!1&&n!==void 0&&!k({experimentName:t,seed:n})&&(f("Conflict between the old seed and the current seed, updating the variant for the current seed"),h({experimentName:t,variants:r,seed:n,callback:i}))}return!0}function p(e){return localStorage.getItem(`${e}-variant-name`)}function S({experimentName:e,variants:t}){let n=p(e);return n===null?void 0:t.find(i=>i.name===n)}function h({experimentName:e,variants:t,seed:n,callback:a}){let i=t.some(o=>o.weight!==void 0),l=t.every(o=>o.weight!==void 0),r=t.reduce((o,u)=>{var V;return o+((V=u.weight)!=null?V:0)},0);i&&!l?(f("SplitTesting.js: Some variants have a weight but not all of them, reset of all weight"),t=g(t)):l&&r!==1?(f("SplitTesting.js: The total of all weight is not equal to 1, reset of all weight"),t=g(t)):i||(t=g(t));let c=y(t,n);localStorage.setItem(`${e}-variant-name`,c.name),s(`New picked variant: ${c.name} ${n!==void 0?"(with seed)":""}`),n!==void 0?localStorage.setItem(`${e}-seed`,n):localStorage.removeItem(`${e}-seed`),a!==void 0&&a(c)}function k({experimentName:e,seed:t}){return localStorage.getItem(`${e}-seed`)===t}function g(e){s("Making all weight equal so the variants have the same probability of being picked");let t=1/e.length;return e.map(a=>(a.weight=t,a))}return A;})();
//# sourceMappingURL=bundle.js.map
