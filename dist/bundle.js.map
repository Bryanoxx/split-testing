{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils.ts", "../src/experiment.ts"],
  "sourcesContent": ["export * from './experiment'\r\nexport type { Variant } from './types'\r\n", "let debug = false\r\n\r\n/**\r\n * Define the state of the debug mode\r\n *\r\n * @export\r\n * @param {boolean} value\r\n */\r\nexport function defineDebugMode (value: boolean): void {\r\n  debug = value\r\n}\r\n\r\n/**\r\n * Logs a message to the console if debug is enabled.\r\n *\r\n * @export\r\n * @param {...string[]} args\r\n */\r\nexport function log (...args: any[]): void {\r\n  if (debug) {\r\n    console.log('SplitTesting.js -', ...args)\r\n  }\r\n}\r\n\r\n/**\r\n * Logs a warning message to the console\r\n *\r\n * @export\r\n * @param {...string[]} args\r\n */\r\nexport function warn (...args: any[]): void {\r\n  console.warn('SplitTesting.js -', ...args)\r\n}\r\n\r\n/**\r\n * Logs a warning message to the console\r\n *\r\n * @export\r\n * @param {...string[]} args\r\n */\r\nexport function error (...args: any[]): void {\r\n  console.error('SplitTesting.js -', ...args)\r\n}\r\n\r\n/**\r\n * Return a random item from an array (with weighted probability)\r\n * A seed is possible in the goal of always returning the same item\r\n *\r\n * @export\r\n * @template T\r\n * @param {any[]} collection\r\n * @param {string} [seed]\r\n * @return {*}  {T}\r\n */\r\nexport function getWeightedRandomElement<T> (collection: any[], seed?: string): T {\r\n  let random: number = (seed !== undefined) ? getSeededRandom(seed) : Math.random()\r\n  const weightedRandomItem = collection.find(item => {\r\n    if (random < item.weight) {\r\n      return item\r\n    } else {\r\n      random -= item.weight\r\n    }\r\n  })\r\n  return weightedRandomItem\r\n}\r\n\r\n/**\r\n * Return always the same number between 0 and 1 from the same string\r\n * Here's how : http://indiegamr.com/generate-repeatable-random-numbers-in-js/\r\n *\r\n * @export\r\n * @param {string} seed\r\n * @return {*}  {number}\r\n */\r\nexport function getSeededRandom (seed: string): number {\r\n  const seedInNumber = seed.split('').map(char => char.charCodeAt(0)).reduce((acc: number, char: number) => acc + char, 0)\r\n  const calcSeed = (seedInNumber * 9301 + 49297) % 233280\r\n  const random = calcSeed / 233280\r\n  return random\r\n}\r\n\r\n/**\r\n * Deep clones all properties except Function and RegExp\r\n * Extracted and edited from https://www.npmjs.com/package/just-clone\r\n *\r\n * @export\r\n * @param {*} obj\r\n * @return {*}  {*}\r\n */\r\nexport function clone (obj: any): any {\r\n  if (typeof obj === 'function') {\r\n    return obj\r\n  }\r\n  const result: any = Array.isArray(obj) ? [] : {}\r\n  for (var key in obj) {\r\n    const value = obj[key]\r\n    const type = {}.toString.call(value).slice(8, -1)\r\n    if (type === 'Array' || type === 'Object') {\r\n      result[key] = clone(value)\r\n    } else if (type === 'Date') {\r\n      result[key] = new Date(value.getTime())\r\n    } else {\r\n      result[key] = value\r\n    }\r\n  }\r\n  return result\r\n}\r\n", "import type { Variant, ExperimentOptions } from './types'\r\nimport { defineDebugMode, log, warn, error, clone, getWeightedRandomElement } from './utils'\r\n\r\n/**\r\n * Configure a split testing experiment with the given options.\r\n *\r\n * @export\r\n * @param {ExperimentOptions} options\r\n * @return {*}  {boolean}\r\n */\r\nexport function setExperiment (options: ExperimentOptions): boolean {\r\n  // Extraction and validation of the options\r\n  const { name: experimentName, seed, debug, onVariantPicked, resolveSeedConflict } = options\r\n  const variants = clone(options.variants)\r\n  if (typeof experimentName !== 'string' || experimentName.length === 0) {\r\n    error('Experiment name is required')\r\n    return false\r\n  }\r\n  if (!Array.isArray(variants) || variants.length === 0) {\r\n    error('Variants are required')\r\n    return false\r\n  }\r\n  const variantsHaveNames = variants.every(variant => variant.name !== undefined && variant.name.length > 0)\r\n  if (!variantsHaveNames) {\r\n    error('All variants must have a name')\r\n    return false\r\n  }\r\n\r\n  // Configuration of the debug mode\r\n  if (debug === true) {\r\n    defineDebugMode(true)\r\n    log('Running split testing with these options :')\r\n    log({ experimentName, variants: options.variants, seed, debug })\r\n  }\r\n\r\n  // Picking or verification of the variant\r\n  const pickedVariantName = getPickedVariantName(experimentName)\r\n  if (pickedVariantName === null) {\r\n    log('No variant picked in localStorage, picking it now')\r\n    pickVariant({\r\n      experimentName,\r\n      variants,\r\n      seed,\r\n      callback: onVariantPicked\r\n    })\r\n  } else {\r\n    log(`Variant already picked, named ${pickedVariantName}`)\r\n    // Checking if the variant name is valid\r\n    if (getPickedVariant({ experimentName, variants }) === undefined) {\r\n      error('Variant name in localStorage don\\'t exist in the variants given in options')\r\n      return false\r\n    }\r\n    // Checking the seed for having a consistent variant\r\n    if (resolveSeedConflict !== false && seed !== undefined && !sameLocalAndGivenSeed({ experimentName, seed })) {\r\n      warn('Conflict between the old seed and the current seed, updating the variant for the current seed')\r\n      pickVariant({\r\n        experimentName,\r\n        variants,\r\n        seed,\r\n        callback: onVariantPicked\r\n      })\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\n/**\r\n * Get the picked variant's name\r\n *\r\n * @export\r\n * @param {string} experimentName\r\n * @return {*}  {(string | null)}\r\n */\r\nexport function getPickedVariantName (experimentName: string): string | null {\r\n  const pickedVariantName = localStorage.getItem(`${experimentName}-variant-name`)\r\n  return pickedVariantName\r\n}\r\n\r\n/**\r\n * Get all the details of the picked variant\r\n *\r\n * @export\r\n * @param {{ variantName: string, variants: Variant[]}} { variantName, variants }\r\n * @return {*}  {(Variant | undefined)}\r\n */\r\nexport function getPickedVariant ({ experimentName, variants }: { experimentName: string, variants: Variant[]}): Variant | undefined {\r\n  // Name of the picked variant\r\n  const pickedVariantName = getPickedVariantName(experimentName)\r\n  if (pickedVariantName === null) {\r\n    return undefined\r\n  }\r\n  // Finding details of the picked variant\r\n  const pickedVariant = variants.find(variant => variant.name === pickedVariantName)\r\n  return pickedVariant\r\n}\r\n\r\n/**\r\n * Pick and save the variant of the experiment in localStorage\r\n *\r\n * @export\r\n * @param {{ experimentName: string, variants: Variant[], seed?: string, callback?: ExperimentOptions['onVariantPicked'] }} { experimentName, variants, seed, callback }\r\n */\r\nexport function pickVariant ({ experimentName, variants, seed, callback }: { experimentName: string, variants: Variant[], seed?: string, callback?: ExperimentOptions['onVariantPicked'] }): void {\r\n  // Extracting weight-related variables\r\n  const hasWeight = variants.some(variant => variant.weight !== undefined)\r\n  const everyHasWeight = variants.every(variant => variant.weight !== undefined)\r\n  const totalWeight = variants.reduce((acc, variant) => acc + (variant.weight ?? 0), 0)\r\n\r\n  // Validating the weigh of the variants\r\n  if (hasWeight && !everyHasWeight) {\r\n    warn('SplitTesting.js: Some variants have a weight but not all of them, reset of all weight')\r\n    variants = makeVariantsWithEqualWeights(variants)\r\n  } else if (everyHasWeight && totalWeight !== 1) {\r\n    warn('SplitTesting.js: The total of all weight is not equal to 1, reset of all weight')\r\n    variants = makeVariantsWithEqualWeights(variants)\r\n  } else if (!hasWeight) {\r\n    // All the variant don't have a weight property\r\n    variants = makeVariantsWithEqualWeights(variants)\r\n  }\r\n\r\n  // Random picking of the variant (or constant if seed provided) and saving it in localStorage\r\n  const pickedVariant = getWeightedRandomElement<Variant>(variants, seed)\r\n  localStorage.setItem(`${experimentName}-variant-name`, pickedVariant.name)\r\n  log(`New picked variant: ${pickedVariant.name} ${seed !== undefined ? '(with seed)' : ''}`)\r\n\r\n  // Saving the seed if provided, for further verifications next time the user come\r\n  if (seed !== undefined) {\r\n    localStorage.setItem(`${experimentName}-seed`, seed)\r\n  } else {\r\n    localStorage.removeItem(`${experimentName}-seed`)\r\n  }\r\n\r\n  // Executing the callback if provided\r\n  if (callback !== undefined) {\r\n    callback(pickedVariant)\r\n  }\r\n}\r\n\r\n/**\r\n * Check if the local seed and the given seed are consistent.\r\n *\r\n * @export\r\n * @param {({ experimentName: string, seed: string | undefined })} { experimentName, seed }\r\n * @return {*}  {boolean}\r\n */\r\nexport function sameLocalAndGivenSeed ({ experimentName, seed }: { experimentName: string, seed: string | undefined }): boolean {\r\n  const localSeed = localStorage.getItem(`${experimentName}-seed`)\r\n  return localSeed === seed\r\n}\r\n\r\n/**\r\n * Reset the weight property of each variant for equal probability of being picked\r\n *\r\n * @export\r\n * @param {Variant[]} variants\r\n * @return {*}  {Variant[]}\r\n */\r\nexport function makeVariantsWithEqualWeights (variants: Variant[]): Variant[] {\r\n  log('Making all weight equal so the variants have the same probability of being picked')\r\n  const weightValue = 1 / variants.length\r\n  const newVariants = variants.map(variant => {\r\n    variant.weight = weightValue\r\n    return variant\r\n  })\r\n  return newVariants\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
